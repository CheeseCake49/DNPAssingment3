@page "/CreatePost"
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@using global::Shared.DTOs
@inject IPostService postService
@inject IUserService userService
@inject NavigationManager navMgr
<h3>Create Post</h3>

<div class="card">
    @if (users == null)
    {
        <label>Loading users...</label>
    }
    else if (!users.Any())
    {
        <label>No users, you cannot create a Todo without assignee.</label>
    }
    else
    {
        <h3>Create Post</h3>
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="postTitle"/>
        </div>
        <div class="form-group field">
            <label>Body:</label>
            <input type="text" @bind="postBody"/>
        </div>
        <div class="form-group field">
            <label>Owner:</label>
            <select @bind="ownerUsername">
                <option>Choose</option>
                @foreach (User user in users)
                {
                    <option value="@user.Username">@user.Username</option>
                }
            </select>
        </div>
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="Create" class="acceptbtn">Create</button>
        </div>
    }
</div>

@code {
    private IEnumerable<User>? users;
    private string postTitle = "";
    private string postBody = "";
    private string ownerUsername = "";

    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.GetUsers();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        msg = "";
        if (ownerUsername == null)
        {
            msg = "You must select an owner!";
            return;
        }
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }

        try
        {
            DTOs.PostCreationDTO dto = new(postTitle, postBody, ownerUsername);
            await postService.CreateAsync(dto);
            navMgr.NavigateTo("/ViewPosts");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}