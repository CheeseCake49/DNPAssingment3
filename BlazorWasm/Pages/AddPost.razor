@page "/AddPost"
@attribute [Authorize]
@using global::Shared.Models
@using HttpClient.ClientInterfaces
@using global::Shared.DTOs
@using System.Security.Claims
@inject IPostService postService
@inject IUserService userService
@inject NavigationManager navMgr

<div class="card">
    <h3>Create Post</h3>
    <div class="form-group field">
        <label>Title:</label>
        <input type="text" @bind="postTitle"/>
    </div>
    <div class="form-group field">
        <label>Body:</label>
        <input type="text" @bind="postBody"/>
    </div>
        
    <div class="button-row">
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }
        <button @onclick="Create" class="acceptbtn">Create</button>
    </div>
</div>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private string? username;
    private string postTitle = "";
    private string postBody = "";

    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;

        username = user.Identity!.Name!;
        
        msg = "";
    }

    private async Task Create()
    {
        msg = "";
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }

        try
        {
            DTOs.PostCreationDTO dto = new(postTitle, postBody, username);
            await postService.CreateAsync(dto);
            navMgr.NavigateTo("/viewposts");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}